{
  "version": 3,
  "sources": ["../../vue-timer-hook/dist/vue-timer-hook.esm-bundler.js"],
  "sourcesContent": ["/*!\n  * vue-timer-hook v1.0.84\n  * (c) 2023 Eduardo San Martin Morote\n  * @license MIT\n  */\nimport { computed, reactive, toRef, ref } from 'vue';\n\nclass Time {\r\n    static getTimeFromSeconds(secs) {\r\n        const totalSeconds = computed(() => Math.ceil(secs.value));\r\n        const days = computed(() => Math.floor(totalSeconds.value / (60 * 60 * 24)));\r\n        const hours = computed(() => Math.floor((totalSeconds.value % (60 * 60 * 24)) / (60 * 60)));\r\n        const minutes = computed(() => Math.floor((totalSeconds.value % (60 * 60)) / 60));\r\n        const seconds = computed(() => Math.floor(totalSeconds.value % 60));\r\n        return {\r\n            seconds,\r\n            minutes,\r\n            hours,\r\n            days,\r\n        };\r\n    }\r\n    static getSecondsFromExpiry(expiry, shouldRound) {\r\n        const now = new Date().getTime();\r\n        const milliSecondsDistance = expiry - now;\r\n        if (milliSecondsDistance > 0) {\r\n            const val = milliSecondsDistance / 1000;\r\n            return shouldRound ? Math.round(val) : val;\r\n        }\r\n        return 0;\r\n    }\r\n    static getSecondsFromPrevTime(prevTime, shouldRound) {\r\n        const now = new Date().getTime();\r\n        const milliSecondsDistance = now - prevTime;\r\n        if (milliSecondsDistance > 0) {\r\n            const val = milliSecondsDistance / 1000;\r\n            return shouldRound ? Math.round(val) : val;\r\n        }\r\n        return 0;\r\n    }\r\n    static getSecondsFromTimeNow() {\r\n        const now = new Date();\r\n        const currentTimestamp = now.getTime();\r\n        const offset = now.getTimezoneOffset() * 60;\r\n        return currentTimestamp / 1000 - offset;\r\n    }\r\n    static getFormattedTimeFromSeconds(totalSeconds, format) {\r\n        const { seconds: secondsValue, minutes, hours, } = Time.getTimeFromSeconds(totalSeconds);\r\n        const ampm = computed(() => format === '12-hour' ? (hours.value >= 12 ? 'pm' : 'am') : '');\r\n        const hoursValue = computed(() => format === '12-hour' ? hours.value % 12 : hours.value);\r\n        return {\r\n            seconds: secondsValue,\r\n            minutes,\r\n            hours: hoursValue,\r\n            ampm,\r\n        };\r\n    }\r\n}\n\nclass Validate {\r\n    static expiryTimestamp(expiryTimestamp) {\r\n        const isValid = new Date(expiryTimestamp).getTime() > 0;\r\n        if (!isValid) {\r\n            console.warn('vue-timer-hook: { useTimer } Invalid expiryTimestamp settings', expiryTimestamp); // eslint-disable-line\r\n        }\r\n        return isValid;\r\n    }\r\n}\n\nconst isNumber = (val) => typeof val === 'number';\r\nfunction useInterval(callback, ms) {\r\n    let intervalId = undefined;\r\n    const remove = () => {\r\n        if (!intervalId)\r\n            return;\r\n        clearInterval(intervalId);\r\n        intervalId = undefined;\r\n    };\r\n    const start = (_ms) => {\r\n        remove();\r\n        if (!_ms && !ms) {\r\n            return;\r\n        }\r\n        const m = (_ms || ms);\r\n        return (intervalId = setInterval(callback, m));\r\n    };\r\n    if (isNumber(ms)) {\r\n        start();\r\n    }\r\n    return { remove, start };\r\n}\n\n// import { useState } from 'react';\r\nconst DEFAULT_DELAY = 1000;\r\nfunction getDelayFromExpiryTimestamp(expiryTimestamp) {\r\n    if (!Validate.expiryTimestamp(expiryTimestamp)) {\r\n        return null;\r\n    }\r\n    const seconds = Time.getSecondsFromExpiry(expiryTimestamp);\r\n    const extraMilliSeconds = Math.floor((seconds - Math.floor(seconds)) * 1000);\r\n    return extraMilliSeconds > 0 ? extraMilliSeconds : DEFAULT_DELAY;\r\n}\r\nconst useTimer = (expiry = 60, autoStart = true) => {\r\n    let interval;\r\n    const state = reactive({\r\n        expiryTimestamp: expiry,\r\n        seconds: Time.getSecondsFromExpiry(expiry),\r\n        isRunning: autoStart,\r\n        isExpired: false,\r\n        didStart: autoStart,\r\n        delay: getDelayFromExpiryTimestamp(expiry),\r\n    });\r\n    function _handleExpire() {\r\n        state.isExpired = true;\r\n        state.isRunning = false;\r\n        state.delay = null;\r\n        if (interval)\r\n            interval.remove();\r\n    }\r\n    function pause() {\r\n        state.isRunning = false;\r\n        if (interval)\r\n            interval.remove();\r\n    }\r\n    function restart(newExpiryTimestamp = expiry, newAutoStart = true) {\r\n        pause();\r\n        state.delay = getDelayFromExpiryTimestamp(newExpiryTimestamp);\r\n        state.didStart = newAutoStart;\r\n        state.isExpired = false;\r\n        state.expiryTimestamp = newExpiryTimestamp;\r\n        state.seconds = Time.getSecondsFromExpiry(newExpiryTimestamp);\r\n        if (state.didStart)\r\n            start();\r\n    }\r\n    function resume() {\r\n        const time = new Date();\r\n        const newExpiryTimestamp = time.setMilliseconds(time.getMilliseconds() + state.seconds * 1000);\r\n        restart(newExpiryTimestamp);\r\n    }\r\n    function start() {\r\n        if (state.didStart) {\r\n            state.seconds = Time.getSecondsFromExpiry(state.expiryTimestamp);\r\n            state.isRunning = true;\r\n            interval = useInterval(() => {\r\n                if (state.delay !== DEFAULT_DELAY) {\r\n                    state.delay = DEFAULT_DELAY;\r\n                }\r\n                const secondsValue = Time.getSecondsFromExpiry(state.expiryTimestamp);\r\n                state.seconds = secondsValue;\r\n                if (secondsValue <= 0) {\r\n                    _handleExpire();\r\n                }\r\n            }, state.isRunning ? state.delay : null);\r\n        }\r\n        else {\r\n            resume();\r\n        }\r\n    }\r\n    restart(expiry, autoStart);\r\n    return {\r\n        ...Time.getTimeFromSeconds(toRef(state, 'seconds')),\r\n        start,\r\n        pause,\r\n        resume,\r\n        restart,\r\n        isRunning: toRef(state, 'isRunning'),\r\n        isExpired: toRef(state, 'isExpired'),\r\n    };\r\n};\n\nconst epochSeconds = () => new Date().getTime();\r\nconst useStopwatch = (offsetTimestamp = 60, autoStart = true) => {\r\n    let interval;\r\n    const passedSeconds = ref(offsetTimestamp);\r\n    const prevTime = ref(epochSeconds());\r\n    const seconds = ref(passedSeconds.value + Time.getSecondsFromPrevTime(prevTime.value || 0, true));\r\n    const isRunning = ref(autoStart);\r\n    function start() {\r\n        prevTime.value = epochSeconds();\r\n        isRunning.value = true;\r\n        seconds.value =\r\n            passedSeconds.value + Time.getSecondsFromPrevTime(prevTime.value, true);\r\n        interval = useInterval(() => {\r\n            seconds.value =\r\n                passedSeconds.value +\r\n                    Time.getSecondsFromPrevTime(prevTime.value, true);\r\n        }, isRunning.value ? 1000 : false);\r\n    }\r\n    function pause() {\r\n        passedSeconds.value = seconds.value;\r\n        isRunning.value = false;\r\n        if (interval)\r\n            interval.remove();\r\n    }\r\n    function reset(offset = 0, newAutoStart = true) {\r\n        pause();\r\n        isRunning.value = newAutoStart;\r\n        passedSeconds.value = offset;\r\n        seconds.value = +passedSeconds.value;\r\n        Time.getSecondsFromPrevTime(prevTime.value, true);\r\n        if (isRunning.value)\r\n            start();\r\n    }\r\n    if (isRunning.value)\r\n        start();\r\n    return {\r\n        ...Time.getTimeFromSeconds(seconds),\r\n        start,\r\n        pause,\r\n        reset,\r\n        isRunning,\r\n    };\r\n};\n\nconst useTime = (format = '24-hour') => {\r\n    const seconds = ref(Time.getSecondsFromTimeNow());\r\n    useInterval(() => {\r\n        seconds.value = Time.getSecondsFromTimeNow();\r\n    }, 1000);\r\n    return {\r\n        ...Time.getFormattedTimeFromSeconds(seconds, format),\r\n    };\r\n};\n\nexport { useStopwatch, useTime, useTimer };\n"],
  "mappings": "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",
  "names": []
}
