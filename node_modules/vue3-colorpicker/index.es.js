var Oe = Object.defineProperty;
var ze = (e, o, t) => o in e ? Oe(e, o, { enumerable: !0, configurable: !0, writable: !0, value: t }) : e[o] = t;
var E = (e, o, t) => (ze(e, typeof o != "symbol" ? o + "" : o, t), t);
import { defineComponent as T, ref as K, reactive as F, watch as ne, computed as L, openBlock as f, createElementBlock as H, normalizeClass as O, createElementVNode as i, normalizeStyle as I, pushScopeId as Q, popScopeId as x, Fragment as te, renderList as se, getCurrentInstance as Te, createCommentVNode as P, resolveComponent as R, createBlock as V, createVNode as Y, inject as Be, withDirectives as Ae, vShow as Re, toDisplayString as be, renderSlot as Ge, provide as Fe, withCtx as ye, resolveDynamicComponent as me, mergeProps as Se, Teleport as qe } from "vue";
import v from "vue-types";
import A from "tinycolor2";
import { tryOnMounted as ee, whenever as W, useDebounceFn as U, useLocalStorage as le, onClickOutside as Xe } from "@vueuse/core";
import { DOMUtils as J } from "@aesoper/normal-utils";
import { merge as ae } from "lodash-es";
import { Angle as Ze } from "vue3-angle";
import "vue3-angle/style.css";
import { createPopper as Ue } from "@popperjs/core";
import { stringify as je, parse as Ye } from "gradient-parser";
const B = (e) => Math.round(e * 100) / 100;
class w {
  constructor(o) {
    E(this, "instance");
    E(this, "alphaValue", 0);
    // RGB
    E(this, "redValue", 0);
    E(this, "greenValue", 0);
    E(this, "blueValue", 0);
    // HSV
    E(this, "hueValue", 0);
    E(this, "saturationValue", 0);
    E(this, "brightnessValue", 0);
    // HSL
    E(this, "hslSaturationValue", 0);
    E(this, "lightnessValue", 0);
    E(this, "initAlpha", () => {
      const o = this.instance.getAlpha();
      this.alphaValue = Math.min(1, o) * 100;
    });
    E(this, "initLightness", () => {
      const { s: o, l: t } = this.instance.toHsl();
      this.hslSaturationValue = B(o), this.lightnessValue = B(t);
    });
    E(this, "initRgb", () => {
      const { r: o, g: t, b: n } = this.instance.toRgb();
      this.redValue = B(o), this.greenValue = B(t), this.blueValue = B(n);
    });
    E(this, "initHsb", () => {
      const { h: o, s: t, v: n } = this.instance.toHsv();
      this.hueValue = Math.min(360, Math.ceil(o)), this.saturationValue = B(t), this.brightnessValue = B(n);
    });
    E(this, "toHexString", () => this.instance.toHexString());
    E(this, "toRgbString", () => this.instance.toRgbString());
    this.instance = A(o), this.initRgb(), this.initHsb(), this.initLightness(), this.initAlpha();
  }
  toString(o) {
    return this.instance.toString(o);
  }
  get hex() {
    return this.instance.toHex();
  }
  set hex(o) {
    this.instance = A(o), this.initHsb(), this.initRgb(), this.initAlpha(), this.initLightness();
  }
  // 色调
  set hue(o) {
    this.saturation === 0 && this.brightness === 0 && (this.saturationValue = 1, this.brightnessValue = 1), this.instance = A({
      h: B(o),
      s: this.saturation,
      v: this.brightness,
      a: this.alphaValue / 100
    }), this.initRgb(), this.initLightness(), this.hueValue = B(o);
  }
  get hue() {
    return this.hueValue;
  }
  // 饱和度
  set saturation(o) {
    this.instance = A({
      h: this.hue,
      s: B(o),
      v: this.brightness,
      a: this.alphaValue / 100
    }), this.initRgb(), this.initLightness(), this.saturationValue = B(o);
  }
  get saturation() {
    return this.saturationValue;
  }
  // 明度
  set brightness(o) {
    this.instance = A({
      h: this.hue,
      s: this.saturation,
      v: B(o),
      a: this.alphaValue / 100
    }), this.initRgb(), this.initLightness(), this.brightnessValue = B(o);
  }
  get brightness() {
    return this.brightnessValue;
  }
  // 亮度
  set lightness(o) {
    this.instance = A({
      h: this.hue,
      s: this.hslSaturationValue,
      l: B(o),
      a: this.alphaValue / 100
    }), this.initRgb(), this.initHsb(), this.lightnessValue = B(o);
  }
  get lightness() {
    return this.lightnessValue;
  }
  // red
  set red(o) {
    const t = this.instance.toRgb();
    this.instance = A({
      ...t,
      r: B(o),
      a: this.alphaValue / 100
    }), this.initHsb(), this.initLightness(), this.redValue = B(o);
  }
  get red() {
    return this.redValue;
  }
  // green
  set green(o) {
    const t = this.instance.toRgb();
    this.instance = A({
      ...t,
      g: B(o),
      a: this.alphaValue / 100
    }), this.initHsb(), this.initLightness(), this.greenValue = B(o);
  }
  get green() {
    return this.greenValue;
  }
  // blue
  set blue(o) {
    const t = this.instance.toRgb();
    this.instance = A({
      ...t,
      b: B(o),
      a: this.alphaValue / 100
    }), this.initHsb(), this.initLightness(), this.blueValue = B(o);
  }
  get blue() {
    return this.blueValue;
  }
  // alpha
  set alpha(o) {
    this.instance.setAlpha(o / 100), this.alphaValue = o;
  }
  get alpha() {
    return this.alphaValue;
  }
  get RGB() {
    return [this.red, this.green, this.blue, this.alpha / 100];
  }
  get HSB() {
    return [this.hue, this.saturation, this.brightness, this.alpha / 100];
  }
  get HSL() {
    return [this.hue, this.hslSaturationValue, this.lightness, this.alpha / 100];
  }
}
function $e(e, o, t, n) {
  return `rgba(${[e, o, t, n / 100].join(",")})`;
}
const re = (e, o, t) => o < t ? e < o ? o : e > t ? t : e : e < t ? t : e > o ? o : e, ie = "color-history", ce = 8;
const G = (e, o) => {
  const t = e.__vccOpts || e;
  for (const [n, l] of o)
    t[n] = l;
  return t;
}, Je = T({
  name: "Alpha",
  props: {
    color: v.instanceOf(w),
    size: v.oneOf(["small", "default"]).def("default")
  },
  emits: ["change"],
  setup(e, { emit: o }) {
    const t = K(null), n = K(null);
    let l = e.color || new w();
    const r = F({
      red: l.red,
      green: l.green,
      blue: l.blue,
      alpha: l.alpha
    });
    ne(
      () => e.color,
      (s) => {
        s && (l = s, ae(r, {
          red: s.red,
          green: s.green,
          blue: s.blue,
          alpha: s.alpha
        }));
      },
      { deep: !0 }
    );
    const c = L(() => {
      const s = $e(r.red, r.green, r.blue, 0), y = $e(r.red, r.green, r.blue, 100);
      return {
        background: `linear-gradient(to right, ${s} , ${y})`
      };
    }), a = () => {
      if (t.value && n.value) {
        const s = r.alpha / 100, y = t.value.getBoundingClientRect(), m = n.value.offsetWidth;
        return Math.round(s * (y.width - m) + m / 2);
      }
      return 0;
    }, h = L(() => ({
      left: a() + "px",
      top: 0
    })), _ = (s) => {
      s.target !== t.value && p(s);
    }, p = (s) => {
      if (s.stopPropagation(), t.value && n.value) {
        const y = t.value.getBoundingClientRect(), m = n.value.offsetWidth;
        let C = s.clientX - y.left;
        C = Math.max(m / 2, C), C = Math.min(C, y.width - m / 2);
        const g = Math.round((C - m / 2) / (y.width - m) * 100);
        l.alpha = g, r.alpha = g, o("change", g);
      }
    };
    return ee(() => {
      const s = {
        drag: (y) => {
          p(y);
        },
        end: (y) => {
          p(y);
        }
      };
      t.value && n.value && J.triggerDragEvent(t.value, s);
    }), { barElement: t, cursorElement: n, getCursorStyle: h, getBackgroundStyle: c, onClickSider: _ };
  }
}), Qe = (e) => (Q("data-v-18925ba6"), e = e(), x(), e), xe = /* @__PURE__ */ Qe(() => /* @__PURE__ */ i("div", { class: "vc-alpha-slider__bar-handle" }, null, -1)), et = [
  xe
];
function tt(e, o, t, n, l, r) {
  return f(), H("div", {
    class: O(["vc-alpha-slider", "transparent", { "small-slider": e.size === "small" }])
  }, [
    i("div", {
      ref: "barElement",
      class: "vc-alpha-slider__bar",
      style: I(e.getBackgroundStyle),
      onClick: o[0] || (o[0] = (...c) => e.onClickSider && e.onClickSider(...c))
    }, [
      i("div", {
        class: O(["vc-alpha-slider__bar-pointer", { "small-bar": e.size === "small" }]),
        ref: "cursorElement",
        style: I(e.getCursorStyle)
      }, et, 6)
    ], 4)
  ], 2);
}
const ue = /* @__PURE__ */ G(Je, [["render", tt], ["__scopeId", "data-v-18925ba6"]]);
const ot = [
  // 第一行
  [
    "#fcc02e",
    "#f67c01",
    "#e64a19",
    "#d81b43",
    "#8e24aa",
    "#512da7",
    "#1f87e8",
    "#008781",
    "#05a045"
  ],
  // 第二行
  [
    "#fed835",
    "#fb8c00",
    "#f5511e",
    "#eb1d4e",
    "#9c28b1",
    "#5d35b0",
    "#2097f3",
    "#029688",
    "#4cb050"
  ],
  // 第三行
  [
    "#ffeb3c",
    "#ffa727",
    "#fe5722",
    "#eb4165",
    "#aa47bc",
    "#673bb7",
    "#42a5f6",
    "#26a59a",
    "#83c683"
  ],
  // 第四行
  [
    "#fff176",
    "#ffb74e",
    "#ff8a66",
    "#f1627e",
    "#b968c7",
    "#7986cc",
    "#64b5f6",
    "#80cbc4",
    "#a5d6a7"
  ],
  // 第五行
  [
    "#fff59c",
    "#ffcc80",
    "#ffab91",
    "#fb879e",
    "#cf93d9",
    "#9ea8db",
    "#90caf8",
    "#b2dfdc",
    "#c8e6ca"
  ],
  // 最后一行
  [
    "transparent",
    "#ffffff",
    "#dedede",
    "#a9a9a9",
    "#4b4b4b",
    "#353535",
    "#212121",
    "#000000",
    "advance"
  ]
], nt = T({
  name: "Palette",
  emits: ["change"],
  setup(e, { emit: o }) {
    return { palettes: ot, computedBgStyle: (l) => l === "transparent" ? l : l === "advance" ? {} : { background: A(l).toRgbString() }, onColorChange: (l) => {
      o("change", l);
    } };
  }
}), at = { class: "vc-compact" }, rt = ["onClick"];
function st(e, o, t, n, l, r) {
  return f(), H("div", at, [
    (f(!0), H(te, null, se(e.palettes, (c, a) => (f(), H("div", {
      key: a,
      class: "vc-compact__row"
    }, [
      (f(!0), H(te, null, se(c, (h, _) => (f(), H("div", {
        key: _,
        class: "vc-compact__color-cube--wrap",
        onClick: (p) => e.onColorChange(h)
      }, [
        i("div", {
          class: O([
            "vc-compact__color_cube",
            {
              advance: h === "advance",
              transparent: h === "transparent"
            }
          ]),
          style: I(e.computedBgStyle(h))
        }, null, 6)
      ], 8, rt))), 128))
    ]))), 128))
  ]);
}
const Pe = /* @__PURE__ */ G(nt, [["render", st], ["__scopeId", "data-v-b969fd48"]]);
const lt = T({
  name: "Board",
  props: {
    color: v.instanceOf(w),
    round: v.bool.def(!1),
    hide: v.bool.def(!0)
  },
  emits: ["change"],
  setup(e, { emit: o }) {
    var C, g, $;
    const t = Te(), n = {
      h: ((C = e.color) == null ? void 0 : C.hue) || 0,
      s: 1,
      v: 1
    }, l = new w(n).toHexString(), r = F({
      hueColor: l,
      saturation: ((g = e.color) == null ? void 0 : g.saturation) || 0,
      brightness: (($ = e.color) == null ? void 0 : $.brightness) || 0
    }), c = K(0), a = K(0), h = K(), _ = K(), p = L(() => ({
      top: c.value + "px",
      left: a.value + "px"
    })), s = () => {
      if (t) {
        const b = t.vnode.el;
        a.value = r.saturation * (b == null ? void 0 : b.clientWidth), c.value = (1 - r.brightness) * (b == null ? void 0 : b.clientHeight);
      }
    }, y = (b) => {
      b.target !== _.value && m(b);
    }, m = (b) => {
      if (t) {
        const M = t.vnode.el, q = M == null ? void 0 : M.getBoundingClientRect();
        let Z = b.clientX - q.left, X = b.clientY - q.top;
        Z = re(Z, 0, q.width), X = re(X, 0, q.height);
        const z = Z / q.width, j = re(-(X / q.height) + 1, 0, 1);
        a.value = Z, c.value = X, r.saturation = z, r.brightness = j, o("change", z, j);
      }
    };
    return ee(() => {
      t && t.vnode.el && h.value && (J.triggerDragEvent(h.value, {
        drag: (b) => {
          m(b);
        },
        end: (b) => {
          m(b);
        }
      }), s());
    }), W(
      () => e.color,
      (b) => {
        ae(r, {
          hueColor: new w({ h: b.hue, s: 1, v: 1 }).toHexString(),
          saturation: b.saturation,
          brightness: b.brightness
        }), s();
      },
      { deep: !0 }
    ), { state: r, cursorElement: h, getCursorStyle: p, onClickBoard: y };
  }
}), de = (e) => (Q("data-v-63803390"), e = e(), x(), e), it = /* @__PURE__ */ de(() => /* @__PURE__ */ i("div", { class: "vc-saturation__white" }, null, -1)), ct = /* @__PURE__ */ de(() => /* @__PURE__ */ i("div", { class: "vc-saturation__black" }, null, -1)), ut = /* @__PURE__ */ de(() => /* @__PURE__ */ i("div", null, null, -1)), dt = [
  ut
];
function ht(e, o, t, n, l, r) {
  return f(), H("div", {
    ref: "boardElement",
    class: O(["vc-saturation", { "vc-saturation__chrome": e.round, "vc-saturation__hidden": e.hide }]),
    style: I({ backgroundColor: e.state.hueColor }),
    onClick: o[0] || (o[0] = (...c) => e.onClickBoard && e.onClickBoard(...c))
  }, [
    it,
    ct,
    i("div", {
      class: "vc-saturation__cursor",
      ref: "cursorElement",
      style: I(e.getCursorStyle)
    }, dt, 4)
  ], 6);
}
const he = /* @__PURE__ */ G(lt, [["render", ht], ["__scopeId", "data-v-63803390"]]);
const gt = T({
  name: "Hue",
  props: {
    color: v.instanceOf(w),
    size: v.oneOf(["small", "default"]).def("default")
  },
  emits: ["change"],
  setup(e, { emit: o }) {
    const t = K(null), n = K(null);
    let l = e.color || new w();
    const r = F({
      hue: l.hue || 0
    });
    ne(
      () => e.color,
      (p) => {
        p && (l = p, ae(r, { hue: l.hue }));
      },
      { deep: !0 }
    );
    const c = () => {
      if (t.value && n.value) {
        const p = t.value.getBoundingClientRect(), s = n.value.offsetWidth;
        return r.hue === 360 ? p.width - s / 2 : r.hue % 360 * (p.width - s) / 360 + s / 2;
      }
      return 0;
    }, a = L(() => ({
      left: c() + "px",
      top: 0
    })), h = (p) => {
      p.target !== t.value && _(p);
    }, _ = (p) => {
      if (p.stopPropagation(), t.value && n.value) {
        const s = t.value.getBoundingClientRect(), y = n.value.offsetWidth;
        let m = p.clientX - s.left;
        m = Math.min(m, s.width - y / 2), m = Math.max(y / 2, m);
        const C = Math.round((m - y / 2) / (s.width - y) * 360);
        l.hue = C, r.hue = C, o("change", C);
      }
    };
    return ee(() => {
      const p = {
        drag: (s) => {
          _(s);
        },
        end: (s) => {
          _(s);
        }
      };
      t.value && n.value && J.triggerDragEvent(t.value, p);
    }), { barElement: t, cursorElement: n, getCursorStyle: a, onClickSider: h };
  }
}), pt = (e) => (Q("data-v-5c4cae5b"), e = e(), x(), e), Ct = /* @__PURE__ */ pt(() => /* @__PURE__ */ i("div", { class: "vc-hue-slider__bar-handle" }, null, -1)), vt = [
  Ct
];
function ft(e, o, t, n, l, r) {
  return f(), H("div", {
    class: O(["vc-hue-slider", { "small-slider": e.size === "small" }])
  }, [
    i("div", {
      ref: "barElement",
      class: "vc-hue-slider__bar",
      onClick: o[0] || (o[0] = (...c) => e.onClickSider && e.onClickSider(...c))
    }, [
      i("div", {
        class: O(["vc-hue-slider__bar-pointer", { "small-bar": e.size === "small" }]),
        ref: "cursorElement",
        style: I(e.getCursorStyle)
      }, vt, 6)
    ], 512)
  ], 2);
}
const ge = /* @__PURE__ */ G(gt, [["render", ft], ["__scopeId", "data-v-5c4cae5b"]]);
const _t = T({
  name: "Lightness",
  props: {
    color: v.instanceOf(w),
    size: v.oneOf(["small", "default"]).def("default")
  },
  emits: ["change"],
  setup(e, { emit: o }) {
    const t = K(null), n = K(null);
    let l = e.color || new w();
    const [r, c, a] = l.HSL, h = F({
      hue: r,
      saturation: c,
      lightness: a
    });
    ne(
      () => e.color,
      (C) => {
        if (C) {
          l = C;
          const [g, $, b] = l.HSL;
          ae(h, {
            hue: g,
            saturation: $,
            lightness: b
          });
        }
      },
      { deep: !0 }
    );
    const _ = L(() => {
      const C = A({
        h: h.hue,
        s: h.saturation,
        l: 0.8
      }).toPercentageRgbString(), g = A({
        h: h.hue,
        s: h.saturation,
        l: 0.6
      }).toPercentageRgbString(), $ = A({
        h: h.hue,
        s: h.saturation,
        l: 0.4
      }).toPercentageRgbString(), b = A({
        h: h.hue,
        s: h.saturation,
        l: 0.2
      }).toPercentageRgbString();
      return {
        background: [
          `-webkit-linear-gradient(left, rgb(255, 255, 255), ${C}, ${g}, ${$}, ${b}, rgb(0, 0, 0))`,
          `-moz-linear-gradient(left, rgb(255, 255, 255), ${C}, ${g}, ${$}, ${b}, rgb(0, 0, 0))`,
          `-ms-linear-gradient(left, rgb(255, 255, 255), ${C}, ${g}, ${$}, ${b}, rgb(0, 0, 0))`
        ]
      };
    }), p = () => {
      if (t.value && n.value) {
        const C = h.lightness, g = t.value.getBoundingClientRect(), $ = n.value.offsetWidth;
        return (1 - C) * (g.width - $) + $ / 2;
      }
      return 0;
    }, s = L(() => ({
      left: p() + "px",
      top: 0
    })), y = (C) => {
      C.target !== t.value && m(C);
    }, m = (C) => {
      if (C.stopPropagation(), t.value && n.value) {
        const g = t.value.getBoundingClientRect(), $ = n.value.offsetWidth;
        let b = C.clientX - g.left;
        b = Math.max($ / 2, b), b = Math.min(b, g.width - $ / 2);
        const M = 1 - (b - $ / 2) / (g.width - $);
        l.lightness = M, o("change", M);
      }
    };
    return ee(() => {
      const C = {
        drag: (g) => {
          m(g);
        },
        end: (g) => {
          m(g);
        }
      };
      t.value && n.value && J.triggerDragEvent(t.value, C);
    }), { barElement: t, cursorElement: n, getCursorStyle: s, getBackgroundStyle: _, onClickSider: y };
  }
}), bt = (e) => (Q("data-v-6156acb7"), e = e(), x(), e), yt = /* @__PURE__ */ bt(() => /* @__PURE__ */ i("div", { class: "vc-lightness-slider__bar-handle" }, null, -1)), mt = [
  yt
];
function St(e, o, t, n, l, r) {
  return f(), H("div", {
    class: O(["vc-lightness-slider", { "small-slider": e.size === "small" }])
  }, [
    i("div", {
      ref: "barElement",
      class: "vc-lightness-slider__bar",
      style: I(e.getBackgroundStyle),
      onClick: o[0] || (o[0] = (...c) => e.onClickSider && e.onClickSider(...c))
    }, [
      i("div", {
        class: O(["vc-lightness-slider__bar-pointer", { "small-bar": e.size === "small" }]),
        ref: "cursorElement",
        style: I(e.getCursorStyle)
      }, mt, 6)
    ], 4)
  ], 2);
}
const Ve = /* @__PURE__ */ G(_t, [["render", St], ["__scopeId", "data-v-6156acb7"]]);
const $t = T({
  name: "History",
  props: {
    colors: v.arrayOf(String).def(() => []),
    round: v.bool.def(!1)
  },
  emits: ["change"],
  setup(e, { emit: o }) {
    return { onColorSelect: (n) => {
      o("change", n);
    } };
  }
}), kt = {
  key: 0,
  class: "vc-colorPicker__record"
}, wt = { class: "color-list" }, Ht = ["onClick"];
function Bt(e, o, t, n, l, r) {
  return e.colors && e.colors.length > 0 ? (f(), H("div", kt, [
    i("div", wt, [
      (f(!0), H(te, null, se(e.colors, (c, a) => (f(), H("div", {
        key: a,
        class: O(["color-item", "transparent", { "color-item__round": e.round }]),
        onClick: (h) => e.onColorSelect(c)
      }, [
        i("div", {
          class: "color-item__display",
          style: I({ backgroundColor: c })
        }, null, 4)
      ], 10, Ht))), 128))
    ])
  ])) : P("", !0);
}
const pe = /* @__PURE__ */ G($t, [["render", Bt], ["__scopeId", "data-v-7e6b67ca"]]);
const At = T({
  name: "Display",
  props: {
    color: v.instanceOf(w),
    disableAlpha: v.bool.def(!1)
  },
  emits: ["update:color", "change"],
  setup(e, { emit: o }) {
    var c, a, h;
    const t = F({
      color: e.color,
      hex: (c = e.color) == null ? void 0 : c.hex,
      alpha: ((a = e.color) == null ? void 0 : a.alpha) + "%",
      previewBgColor: (h = e.color) == null ? void 0 : h.toRgbString()
    }), n = L(() => ({
      background: t.previewBgColor
    })), l = U((_) => {
      if (!_.target.value)
        return;
      const p = parseInt(_.target.value.replace("%", ""));
      !isNaN(p) && t.color && (t.color.alpha = p), o("update:color", t.color), o("change", t.color);
    }, 300), r = U((_) => {
      if (!_.target.value)
        return;
      const p = _.target.value.replace("#", "");
      A(p).isValid() && t.color && (t.color.hex = p), o("update:color", t.color), o("change", t.color);
    }, 300);
    return W(
      () => e.color,
      (_) => {
        _ && (t.color = _, t.alpha = t.color.alpha + "%", t.hex = t.color.hex);
      },
      { deep: !0 }
    ), W(
      () => t.color,
      () => {
        t.color && (t.previewBgColor = t.color.toRgbString());
      },
      { deep: !0 }
    ), { state: t, getBgColorStyle: n, onAlphaBlur: l, onInputChange: r };
  }
}), Rt = { class: "vc-display" }, Pt = { class: "vc-current-color vc-transparent" }, Vt = { class: "vc-color-input" }, Kt = ["value"], It = {
  key: 0,
  class: "vc-alpha-input"
}, Et = ["value"];
function Lt(e, o, t, n, l, r) {
  return f(), H("div", Rt, [
    i("div", Pt, [
      i("div", {
        class: "color-cube",
        style: I(e.getBgColorStyle)
      }, null, 4)
    ]),
    i("div", Vt, [
      i("input", {
        value: e.state.hex,
        onInput: o[0] || (o[0] = (...c) => e.onInputChange && e.onInputChange(...c))
      }, null, 40, Kt)
    ]),
    e.disableAlpha ? P("", !0) : (f(), H("div", It, [
      i("input", {
        class: "vc-alpha-input__inner",
        value: e.state.alpha,
        onInput: o[1] || (o[1] = (...c) => e.onAlphaBlur && e.onAlphaBlur(...c))
      }, null, 40, Et)
    ]))
  ]);
}
const Ce = /* @__PURE__ */ G(At, [["render", Lt], ["__scopeId", "data-v-ffdc53e2"]]);
const Wt = T({
  name: "FkColorPicker",
  components: { Display: Ce, Alpha: ue, Palette: Pe, Board: he, Hue: ge, Lightness: Ve, History: pe },
  props: {
    color: v.instanceOf(w),
    disableHistory: v.bool.def(!1),
    roundHistory: v.bool.def(!1),
    disableAlpha: v.bool.def(!1)
  },
  emits: ["update:color", "change", "advanceChange"],
  setup(e, { emit: o }) {
    const t = e.color || new w(), n = F({
      color: t,
      hex: t.toHexString(),
      rgb: t.toRgbString()
    }), l = K(!1), r = L(() => ({ background: n.rgb })), c = () => {
      l.value = !1, o("advanceChange", !1);
    }, a = le(ie, [], {}), h = U(() => {
      if (e.disableHistory)
        return;
      const g = n.color.toRgbString();
      if (a.value = a.value.filter(($) => !A.equals($, g)), !a.value.includes(g)) {
        for (; a.value.length > ce; )
          a.value.pop();
        a.value.unshift(g);
      }
    }, 500), _ = (g) => {
      g === "advance" ? (l.value = !0, o("advanceChange", !0)) : (n.color.hex = g, o("advanceChange", !1));
    }, p = (g) => {
      n.color.alpha = g;
    }, s = (g) => {
      n.color.hue = g;
    }, y = (g, $) => {
      n.color.saturation = g, n.color.brightness = $;
    }, m = (g) => {
      n.color.lightness = g;
    }, C = (g) => {
      const b = g.target.value.replace("#", "");
      A(b).isValid() && (n.color.hex = b);
    };
    return W(
      () => e.color,
      (g) => {
        g && (n.color = g);
      },
      { deep: !0 }
    ), W(
      () => n.color,
      () => {
        n.hex = n.color.hex, n.rgb = n.color.toRgbString(), h(), o("update:color", n.color), o("change", n.color);
      },
      { deep: !0 }
    ), {
      state: n,
      advancePanelShow: l,
      onBack: c,
      onCompactChange: _,
      onAlphaChange: p,
      onHueChange: s,
      onBoardChange: y,
      onLightChange: m,
      onInputChange: C,
      previewStyle: r,
      historyColors: a
    };
  }
}), Mt = (e) => (Q("data-v-592a5ec3"), e = e(), x(), e), Dt = { class: "vc-fk-colorPicker" }, Nt = { class: "vc-fk-colorPicker__inner" }, Ot = { class: "vc-fk-colorPicker__header" }, zt = /* @__PURE__ */ Mt(() => /* @__PURE__ */ i("div", { class: "back" }, null, -1)), Tt = [
  zt
];
function Gt(e, o, t, n, l, r) {
  const c = R("Palette"), a = R("Board"), h = R("Hue"), _ = R("Lightness"), p = R("Alpha"), s = R("Display"), y = R("History");
  return f(), H("div", Dt, [
    i("div", Nt, [
      i("div", Ot, [
        e.advancePanelShow ? (f(), H("span", {
          key: 0,
          style: { cursor: "pointer" },
          onClick: o[0] || (o[0] = (...m) => e.onBack && e.onBack(...m))
        }, Tt)) : P("", !0)
      ]),
      e.advancePanelShow ? P("", !0) : (f(), V(c, {
        key: 0,
        onChange: e.onCompactChange
      }, null, 8, ["onChange"])),
      e.advancePanelShow ? (f(), V(a, {
        key: 1,
        color: e.state.color,
        onChange: e.onBoardChange
      }, null, 8, ["color", "onChange"])) : P("", !0),
      e.advancePanelShow ? (f(), V(h, {
        key: 2,
        color: e.state.color,
        onChange: e.onHueChange
      }, null, 8, ["color", "onChange"])) : P("", !0),
      e.advancePanelShow ? P("", !0) : (f(), V(_, {
        key: 3,
        color: e.state.color,
        onChange: e.onLightChange
      }, null, 8, ["color", "onChange"])),
      e.disableAlpha ? P("", !0) : (f(), V(p, {
        key: 4,
        color: e.state.color,
        onChange: e.onAlphaChange
      }, null, 8, ["color", "onChange"])),
      Y(s, {
        color: e.state.color,
        "disable-alpha": e.disableAlpha
      }, null, 8, ["color", "disable-alpha"]),
      e.disableHistory ? P("", !0) : (f(), V(y, {
        key: 5,
        round: e.roundHistory,
        colors: e.historyColors,
        onChange: e.onCompactChange
      }, null, 8, ["round", "colors", "onChange"]))
    ])
  ]);
}
const ke = /* @__PURE__ */ G(Wt, [["render", Gt], ["__scopeId", "data-v-592a5ec3"]]);
const Ft = T({
  name: "ChromeColorPicker",
  components: { Display: Ce, Alpha: ue, Board: he, Hue: ge, History: pe },
  props: {
    color: v.instanceOf(w),
    disableHistory: v.bool.def(!1),
    roundHistory: v.bool.def(!1),
    disableAlpha: v.bool.def(!1)
  },
  emits: ["update:color", "change"],
  setup(e, { emit: o }) {
    const t = e.color || new w(), n = F({
      color: t,
      hex: t.toHexString(),
      rgb: t.toRgbString()
    }), l = L(() => ({ background: n.rgb })), r = le(ie, [], {}), c = U(() => {
      if (e.disableHistory)
        return;
      const s = n.color.toRgbString();
      if (r.value = r.value.filter((y) => !A.equals(y, s)), !r.value.includes(s)) {
        for (; r.value.length > ce; )
          r.value.pop();
        r.value.unshift(s);
      }
    }, 500), a = (s) => {
      n.color.alpha = s;
    }, h = (s) => {
      n.color.hue = s;
    }, _ = (s, y) => {
      n.color.saturation = s, n.color.brightness = y;
    }, p = (s) => {
      s !== "advance" && (n.color.hex = s);
    };
    return W(
      () => e.color,
      (s) => {
        s && (n.color = s);
      },
      { deep: !0 }
    ), W(
      () => n.color,
      () => {
        n.hex = n.color.hex, n.rgb = n.color.toRgbString(), c(), o("update:color", n.color), o("change", n.color);
      },
      { deep: !0 }
    ), {
      state: n,
      previewStyle: l,
      historyColors: r,
      onAlphaChange: a,
      onHueChange: h,
      onBoardChange: _,
      onCompactChange: p
    };
  }
}), qt = { class: "vc-chrome-colorPicker" }, Xt = { class: "vc-chrome-colorPicker-body" }, Zt = { class: "chrome-controls" }, Ut = { class: "chrome-color-wrap transparent" }, jt = { class: "chrome-sliders" };
function Yt(e, o, t, n, l, r) {
  const c = R("Board"), a = R("Hue"), h = R("Alpha"), _ = R("Display"), p = R("History");
  return f(), H("div", qt, [
    Y(c, {
      round: !0,
      hide: !1,
      color: e.state.color,
      onChange: e.onBoardChange
    }, null, 8, ["color", "onChange"]),
    i("div", Xt, [
      i("div", Zt, [
        i("div", Ut, [
          i("div", {
            class: "current-color",
            style: I(e.previewStyle)
          }, null, 4)
        ]),
        i("div", jt, [
          Y(a, {
            size: "small",
            color: e.state.color,
            onChange: e.onHueChange
          }, null, 8, ["color", "onChange"]),
          e.disableAlpha ? P("", !0) : (f(), V(h, {
            key: 0,
            size: "small",
            color: e.state.color,
            onChange: e.onAlphaChange
          }, null, 8, ["color", "onChange"]))
        ])
      ]),
      Y(_, {
        color: e.state.color,
        "disable-alpha": e.disableAlpha
      }, null, 8, ["color", "disable-alpha"]),
      e.disableHistory ? P("", !0) : (f(), V(p, {
        key: 0,
        round: e.roundHistory,
        colors: e.historyColors,
        onChange: e.onCompactChange
      }, null, 8, ["round", "colors", "onChange"]))
    ])
  ]);
}
const we = /* @__PURE__ */ G(Ft, [["render", Yt], ["__scopeId", "data-v-61d7303b"]]), ve = "Vue3ColorPickerProvider";
const Jt = T({
  name: "GradientColorPicker",
  components: { Angle: Ze, Display: Ce, Alpha: ue, Palette: Pe, Board: he, Hue: ge, Lightness: Ve, History: pe },
  props: {
    startColor: v.instanceOf(w).isRequired,
    endColor: v.instanceOf(w).isRequired,
    startColorStop: v.number.def(0),
    endColorStop: v.number.def(100),
    angle: v.number.def(0),
    disableHistory: v.bool.def(!1),
    roundHistory: v.bool.def(!1),
    disableAlpha: v.bool.def(!1)
  },
  emits: [
    "update:startColor",
    "update:endColor",
    "update:angle",
    "update:startColorStop",
    "update:endColorStop",
    "startColorChange",
    "endColorChange",
    "advanceChange",
    "angleChange",
    "startColorStopChange",
    "endColorStopChange"
  ],
  setup(e, { emit: o }) {
    const t = F({
      startActive: !0,
      startColor: e.startColor,
      endColor: e.endColor,
      startColorStop: e.startColorStop,
      endColorStop: e.endColorStop,
      angle: e.angle,
      // rgba
      startColorRgba: e.startColor.toRgbString(),
      endColorRgba: e.endColor.toRgbString()
    }), n = Be(ve), l = K(!1), r = K(), c = K(), a = K();
    ne(
      () => [e.startColor, e.endColor, e.angle],
      (u) => {
        t.startColor = u[0], t.endColor = u[1], t.angle = u[2];
      }
    );
    const h = L({
      get: () => t.startActive ? t.startColor : t.endColor,
      set: (u) => {
        if (t.startActive) {
          t.startColor = u;
          return;
        }
        t.endColor = u;
      }
    }), _ = L(() => {
      if (a.value && r.value) {
        const u = t.startColorStop / 100, k = a.value.getBoundingClientRect(), S = r.value.offsetWidth;
        return Math.round(u * (k.width - S) + S / 2);
      }
      return 0;
    }), p = L(() => {
      if (a.value && c.value) {
        const u = t.endColorStop / 100, k = a.value.getBoundingClientRect(), S = c.value.offsetWidth;
        return Math.round(u * (k.width - S) + S / 2);
      }
      return 0;
    }), s = L(() => ({
      background: `linear-gradient(${t.angle}deg, ${t.startColorRgba} ${t.startColorStop}%, ${t.endColorRgba} ${t.endColorStop}%)`
    })), y = (u) => {
      var k;
      if (t.startActive = !0, a.value && r.value) {
        const S = (k = a.value) == null ? void 0 : k.getBoundingClientRect();
        let N = u.clientX - S.left;
        N = Math.max(r.value.offsetWidth / 2, N), N = Math.min(N, S.width - r.value.offsetWidth / 2), t.startColorStop = Math.round(
          (N - r.value.offsetWidth / 2) / (S.width - r.value.offsetWidth) * 100
        ), o("update:startColorStop", t.startColorStop), o("startColorStopChange", t.startColorStop);
      }
    }, m = (u) => {
      var k;
      if (t.startActive = !1, a.value && c.value) {
        const S = (k = a.value) == null ? void 0 : k.getBoundingClientRect();
        let N = u.clientX - S.left;
        N = Math.max(c.value.offsetWidth / 2, N), N = Math.min(N, S.width - c.value.offsetWidth / 2), t.endColorStop = Math.round(
          (N - c.value.offsetWidth / 2) / (S.width - c.value.offsetWidth) * 100
        ), o("update:endColorStop", t.endColorStop), o("endColorStopChange", t.endColorStop);
      }
    }, C = (u) => {
      const k = u.target, S = parseInt(k.value.replace("°", ""));
      isNaN(S) || (t.angle = S % 360), o("update:angle", t.angle), o("angleChange", t.angle);
    }, g = (u) => {
      t.angle = u, o("update:angle", t.angle), o("angleChange", t.angle);
    }, $ = (u) => {
      u === "advance" ? (l.value = !0, o("advanceChange", !0)) : (h.value.hex = u, o("advanceChange", !1)), z();
    }, b = (u) => {
      h.value.alpha = u, z();
    }, M = (u) => {
      h.value.hue = u, z();
    }, q = (u, k) => {
      h.value.saturation = u, h.value.brightness = k, z();
    }, Z = (u) => {
      h.value.lightness = u, z();
    }, X = () => {
      z();
    }, z = () => {
      t.startActive ? (o("update:startColor", t.startColor), o("startColorChange", t.startColor)) : (o("update:endColor", t.endColor), o("endColorChange", t.endColor));
    }, j = () => {
      l.value = !1, o("advanceChange", !1);
    }, d = le(ie, [], {}), D = U(() => {
      if (e.disableHistory)
        return;
      const u = h.value.toRgbString();
      if (d.value = d.value.filter((k) => !A.equals(k, u)), !d.value.includes(u)) {
        for (; d.value.length > ce; )
          d.value.pop();
        d.value.unshift(u);
      }
    }, 500);
    return ee(() => {
      c.value && r.value && (J.triggerDragEvent(c.value, {
        drag: (u) => {
          m(u);
        },
        end: (u) => {
          m(u);
        }
      }), J.triggerDragEvent(r.value, {
        drag: (u) => {
          y(u);
        },
        end: (u) => {
          y(u);
        }
      }));
    }), W(
      () => t.startColor,
      (u) => {
        t.startColorRgba = u.toRgbString();
      },
      { deep: !0 }
    ), W(
      () => t.endColor,
      (u) => {
        t.endColorRgba = u.toRgbString();
      },
      { deep: !0 }
    ), W(
      () => h.value,
      () => {
        D();
      },
      { deep: !0 }
    ), {
      startGradientRef: r,
      stopGradientRef: c,
      colorRangeRef: a,
      state: t,
      currentColor: h,
      getStartColorLeft: _,
      getEndColorLeft: p,
      gradientBg: s,
      advancePanelShow: l,
      onDegreeBlur: C,
      onCompactChange: $,
      onAlphaChange: b,
      onHueChange: M,
      onBoardChange: q,
      onLightChange: Z,
      historyColors: d,
      onBack: j,
      onDegreeChange: g,
      onDisplayChange: X,
      lang: n == null ? void 0 : n.lang
    };
  }
}), fe = (e) => (Q("data-v-46339c64"), e = e(), x(), e), Qt = { class: "vc-gradient-picker" }, xt = { class: "vc-gradient-picker__header" }, eo = /* @__PURE__ */ fe(() => /* @__PURE__ */ i("div", { class: "back" }, null, -1)), to = [
  eo
], oo = { class: "vc-gradient-picker__body" }, no = {
  class: "vc-color-range",
  ref: "colorRangeRef"
}, ao = { class: "vc-color-range__container" }, ro = { class: "vc-gradient__stop__container" }, so = ["title"], lo = /* @__PURE__ */ fe(() => /* @__PURE__ */ i("span", { class: "vc-gradient__stop--inner" }, null, -1)), io = [
  lo
], co = ["title"], uo = /* @__PURE__ */ fe(() => /* @__PURE__ */ i("span", { class: "vc-gradient__stop--inner" }, null, -1)), ho = [
  uo
], go = { class: "vc-picker-degree-input vc-degree-input" }, po = { class: "vc-degree-input__control" }, Co = ["value"], vo = { class: "vc-degree-input__panel" }, fo = { class: "vc-degree-input__disk" };
function _o(e, o, t, n, l, r) {
  const c = R("Angle"), a = R("Palette"), h = R("Board"), _ = R("Hue"), p = R("Lightness"), s = R("Alpha"), y = R("Display"), m = R("History");
  return f(), H("div", Qt, [
    Ae(i("div", xt, [
      i("span", {
        style: { cursor: "pointer" },
        onClick: o[0] || (o[0] = (...C) => e.onBack && e.onBack(...C))
      }, to)
    ], 512), [
      [Re, e.advancePanelShow]
    ]),
    i("div", oo, [
      i("div", no, [
        i("div", ao, [
          i("div", {
            class: "vc-background",
            style: I(e.gradientBg)
          }, null, 4),
          i("div", ro, [
            i("div", {
              class: O(["vc-gradient__stop", {
                "vc-gradient__stop--current": e.state.startActive
              }]),
              ref: "startGradientRef",
              title: e.lang === "ZH-cn" ? "开始" : "Start",
              style: I({ left: e.getStartColorLeft + "px" })
            }, io, 14, so),
            i("div", {
              class: O(["vc-gradient__stop", {
                "vc-gradient__stop--current": !e.state.startActive
              }]),
              ref: "stopGradientRef",
              title: e.lang === "ZH-cn" ? "结束" : "End",
              style: I({ left: e.getEndColorLeft + "px" })
            }, ho, 14, co)
          ])
        ])
      ], 512),
      i("div", go, [
        i("div", po, [
          i("input", {
            value: e.state.angle,
            onBlur: o[1] || (o[1] = (...C) => e.onDegreeBlur && e.onDegreeBlur(...C))
          }, null, 40, Co)
        ]),
        i("div", vo, [
          i("div", fo, [
            Y(c, {
              angle: e.state.angle,
              "onUpdate:angle": o[2] || (o[2] = (C) => e.state.angle = C),
              size: 40,
              onChange: e.onDegreeChange
            }, null, 8, ["angle", "onChange"])
          ])
        ])
      ])
    ]),
    e.advancePanelShow ? P("", !0) : (f(), V(a, {
      key: 0,
      onChange: e.onCompactChange
    }, null, 8, ["onChange"])),
    e.advancePanelShow ? (f(), V(h, {
      key: 1,
      color: e.currentColor,
      onChange: e.onBoardChange
    }, null, 8, ["color", "onChange"])) : P("", !0),
    e.advancePanelShow ? (f(), V(_, {
      key: 2,
      color: e.currentColor,
      onChange: e.onHueChange
    }, null, 8, ["color", "onChange"])) : P("", !0),
    e.advancePanelShow ? P("", !0) : (f(), V(p, {
      key: 3,
      color: e.currentColor,
      onChange: e.onLightChange
    }, null, 8, ["color", "onChange"])),
    e.disableAlpha ? P("", !0) : (f(), V(s, {
      key: 4,
      color: e.currentColor,
      onChange: e.onAlphaChange
    }, null, 8, ["color", "onChange"])),
    Y(y, {
      color: e.currentColor,
      "disable-alpha": e.disableAlpha,
      onChange: e.onDisplayChange
    }, null, 8, ["color", "disable-alpha", "onChange"]),
    e.disableHistory ? P("", !0) : (f(), V(m, {
      key: 5,
      round: e.roundHistory,
      colors: e.historyColors,
      onChange: e.onCompactChange
    }, null, 8, ["round", "colors", "onChange"]))
  ]);
}
const He = /* @__PURE__ */ G(Jt, [["render", _o], ["__scopeId", "data-v-46339c64"]]);
const bo = T({
  name: "WrapContainer",
  props: {
    showTab: v.bool.def(!1),
    activeKey: v.oneOf(["pure", "gradient"]).def("pure")
  },
  emits: ["update:activeKey", "change"],
  setup(e, { emit: o }) {
    const t = F({
      activeKey: e.activeKey
    }), n = Be(ve), l = (r) => {
      t.activeKey = r, o("update:activeKey", r), o("change", r);
    };
    return W(
      () => e.activeKey,
      (r) => {
        t.activeKey = r;
      }
    ), { state: t, onActiveKeyChange: l, lang: n == null ? void 0 : n.lang };
  }
}), yo = { class: "vc-colorpicker" }, mo = { class: "vc-colorpicker--container" }, So = {
  key: 0,
  class: "vc-colorpicker--tabs"
}, $o = { class: "vc-colorpicker--tabs__inner" }, ko = { class: "vc-btn__content" }, wo = { class: "vc-btn__content" };
function Ho(e, o, t, n, l, r) {
  return f(), H("div", yo, [
    i("div", mo, [
      e.showTab ? (f(), H("div", So, [
        i("div", $o, [
          i("div", {
            class: O([
              "vc-colorpicker--tabs__btn",
              {
                "vc-btn-active": e.state.activeKey === "pure"
              }
            ]),
            onClick: o[0] || (o[0] = (c) => e.onActiveKeyChange("pure"))
          }, [
            i("button", null, [
              i("div", ko, be(e.lang === "ZH-cn" ? "纯色" : "Pure"), 1)
            ])
          ], 2),
          i("div", {
            class: O([
              "vc-colorpicker--tabs__btn",
              {
                "vc-btn-active": e.state.activeKey === "gradient"
              }
            ]),
            onClick: o[1] || (o[1] = (c) => e.onActiveKeyChange("gradient"))
          }, [
            i("button", null, [
              i("div", wo, be(e.lang === "ZH-cn" ? "渐变色" : "Gradient"), 1)
            ])
          ], 2),
          i("div", {
            class: "vc-colorpicker--tabs__bg",
            style: I({
              width: "50%",
              left: `calc(${e.state.activeKey === "gradient" ? 50 : 0}%)`
            })
          }, null, 4)
        ])
      ])) : P("", !0),
      Ge(e.$slots, "default", {}, void 0, !0)
    ])
  ]);
}
const Bo = /* @__PURE__ */ G(bo, [["render", Ho], ["__scopeId", "data-v-4afdf3bb"]]);
const Ao = {
  isWidget: v.bool.def(!1),
  pickerType: v.oneOf(["fk", "chrome"]).def("fk"),
  shape: v.oneOf(["circle", "square"]).def("square"),
  pureColor: {
    type: [String, Object],
    default: "#000000"
  },
  gradientColor: v.string.def(
    "linear-gradient(90deg, rgba(255, 255, 255, 1) 0%, rgba(0, 0, 0, 1) 100%)"
  ),
  format: {
    type: String,
    default: "rgb"
  },
  disableAlpha: v.bool.def(!1),
  disableHistory: v.bool.def(!1),
  roundHistory: v.bool.def(!1),
  useType: v.oneOf(["pure", "gradient", "both"]).def("pure"),
  activeKey: v.oneOf(["pure", "gradient"]).def("pure"),
  lang: {
    type: String,
    default: "ZH-cn"
  },
  zIndex: v.number.def(9999)
}, Ro = T({
  name: "ColorPicker",
  components: { FkColorPicker: ke, ChromeColorPicker: we, GradientColorPicker: He, WrapContainer: Bo },
  inheritAttrs: !1,
  props: Ao,
  emits: [
    "update:pureColor",
    "pureColorChange",
    "update:gradientColor",
    "gradientColorChange",
    "update:activeKey",
    "activeKeyChange"
  ],
  setup(e, { emit: o }) {
    const t = F({
      pureColor: e.pureColor || "",
      activeKey: e.useType === "gradient" ? "gradient" : e.activeKey,
      //  "pure" | "gradient"
      isAdvanceMode: !1
    });
    Fe(ve, {
      lang: L(() => e.lang || "ZH-cn")
    });
    const n = new w(t.pureColor), l = K(n), r = new w("#000"), c = new w("#000"), a = F({
      startColor: r,
      endColor: c,
      startColorStop: 0,
      endColorStop: 100,
      angle: 0,
      gradientColor: e.gradientColor
    }), h = K(!1), _ = K(null), p = K(null), s = L(() => ({
      background: t.activeKey !== "gradient" ? A(t.pureColor).toRgbString() : a.gradientColor
    })), y = L(() => t.activeKey === "gradient" ? He.name : e.pickerType === "fk" ? ke.name : we.name), m = L(() => t.activeKey === "gradient" ? {
      startColor: a.startColor,
      endColor: a.endColor,
      onStartColorChange: (d) => {
        a.startColor = d, M();
      },
      onEndColorChange: (d) => {
        a.endColor = d, M();
      },
      angle: a.angle,
      startColorStop: a.startColorStop,
      endColorStop: a.endColorStop,
      onStartColorStopChange: (d) => {
        a.startColorStop = d, M();
      },
      onEndColorStopChange: (d) => {
        a.endColorStop = d, M();
      },
      onAngleChange: (d) => {
        a.angle = d, M();
      },
      onAdvanceChange: (d) => {
        t.isAdvanceMode = d;
      }
    } : {
      disableAlpha: e.disableAlpha,
      disableHistory: e.disableHistory,
      roundHistory: e.roundHistory,
      color: l.value,
      onChange: X,
      onAdvanceChange: C
    }), C = (d) => {
      t.isAdvanceMode = d;
    }, g = () => {
      h.value = !0;
    }, $ = () => {
      h.value = !1;
    }, b = () => {
      var d, D, u, k;
      try {
        const [S] = Ye(a.gradientColor);
        if (S && S.type === "linear-gradient" && ((d = S.orientation) == null ? void 0 : d.type) === "angular" && S.colorStops.length >= 2) {
          const N = S.colorStops[0], _e = S.colorStops[1];
          a.startColorStop = Number((D = N.length) == null ? void 0 : D.value) || 0, a.endColorStop = Number((u = _e.length) == null ? void 0 : u.value) || 0, a.angle = Number((k = S.orientation) == null ? void 0 : k.value) || 0;
          const [Ke, Ie, Ee, Le] = N.value, [We, Me, De, Ne] = _e.value;
          a.startColor = new w({
            r: Number(Ke),
            g: Number(Ie),
            b: Number(Ee),
            a: Number(Le)
          }), a.endColor = new w({
            r: Number(We),
            g: Number(Me),
            b: Number(De),
            a: Number(Ne)
          });
        }
      } catch (S) {
        console.log(`[Parse Color]: ${S}`);
      }
    }, M = U(() => {
      const d = q();
      try {
        a.gradientColor = je(d), o("update:gradientColor", a.gradientColor), o("gradientColorChange", a.gradientColor);
      } catch (D) {
        console.log(D);
      }
    }, 300), q = () => {
      const d = [], D = a.startColor.RGB.map((k) => k.toString()), u = a.endColor.RGB.map((k) => k.toString());
      return d.push({
        type: "linear-gradient",
        orientation: { type: "angular", value: a.angle + "" },
        colorStops: [
          {
            type: "rgba",
            value: [D[0], D[1], D[2], D[3]],
            length: { value: a.startColorStop + "", type: "%" }
          },
          {
            type: "rgba",
            value: [u[0], u[1], u[2], u[3]],
            length: { value: a.endColorStop + "", type: "%" }
          }
        ]
      }), d;
    }, Z = () => {
      if (_.value && p.value) {
        const d = _.value.offsetParent, D = _.value.offsetTop || (d == null ? void 0 : d.offsetTop), u = window.innerHeight - (D - window.pageYOffset) - _.value.offsetHeight;
        Ue(_.value, p.value, {
          placement: "auto",
          modifiers: [
            {
              name: "flip",
              options: {
                boundary: u > 500 ? "clippingParents" : _.value,
                fallbackPlacements: ["bottom", "left"]
              }
            }
          ]
        });
      }
    }, X = (d) => {
      l.value = d, t.pureColor = d.toString(e.format), z();
    }, z = U(() => {
      o("update:pureColor", t.pureColor), o("pureColorChange", t.pureColor);
    }, 300);
    Xe(p, () => {
      $();
    });
    const j = (d) => {
      t.activeKey = d, o("update:activeKey", d), o("activeKeyChange", d);
    };
    return ee(() => {
      b(), Z();
    }), W(
      () => e.gradientColor,
      (d) => {
        d != a.gradientColor && (a.gradientColor = d);
      }
    ), W(
      () => a.gradientColor,
      () => {
        b();
      }
    ), W(
      () => e.activeKey,
      (d) => {
        t.activeKey = d;
      }
    ), W(
      () => e.useType,
      (d) => {
        t.activeKey !== "gradient" && d === "gradient" ? t.activeKey = "gradient" : t.activeKey = "pure";
      }
    ), W(
      () => e.pureColor,
      (d) => {
        A.equals(d, t.pureColor) || (t.pureColor = d, l.value = new w(d), z());
      },
      { deep: !0 }
    ), {
      colorCubeRef: _,
      pickerRef: p,
      showPicker: h,
      colorInstance: l,
      getBgColorStyle: s,
      onColorChange: X,
      onShowPicker: g,
      onActiveKeyChange: j,
      getComponentName: y,
      getBindArgs: m,
      state: t
    };
  }
});
function Po(e, o, t, n, l, r) {
  const c = R("WrapContainer");
  return f(), H(te, null, [
    e.isWidget ? (f(), V(c, {
      key: 0,
      "active-key": e.state.activeKey,
      "onUpdate:active-key": o[0] || (o[0] = (a) => e.state.activeKey = a),
      "show-tab": e.useType === "both",
      onChange: e.onActiveKeyChange,
      style: I({ zIndex: e.zIndex })
    }, {
      default: ye(() => [
        (f(), V(me(e.getComponentName), Se({ key: e.getComponentName }, e.getBindArgs), null, 16))
      ]),
      _: 1
    }, 8, ["active-key", "show-tab", "onChange", "style"])) : P("", !0),
    e.isWidget ? P("", !0) : (f(), H(te, { key: 1 }, [
      i("div", {
        class: O(["vc-color-wrap transparent", { round: e.shape === "circle" }]),
        ref: "colorCubeRef"
      }, [
        i("div", {
          class: "current-color",
          style: I(e.getBgColorStyle),
          onClick: o[1] || (o[1] = (...a) => e.onShowPicker && e.onShowPicker(...a))
        }, null, 4)
      ], 2),
      (f(), V(qe, { to: "body" }, [
        Ae(i("div", {
          ref: "pickerRef",
          style: I({ zIndex: e.zIndex })
        }, [
          e.showPicker ? (f(), V(c, {
            key: 0,
            "show-tab": e.useType === "both" && !e.state.isAdvanceMode,
            "active-key": e.state.activeKey,
            "onUpdate:active-key": o[2] || (o[2] = (a) => e.state.activeKey = a),
            onChange: e.onActiveKeyChange
          }, {
            default: ye(() => [
              (f(), V(me(e.getComponentName), Se({ key: e.getComponentName }, e.getBindArgs), null, 16))
            ]),
            _: 1
          }, 8, ["show-tab", "active-key", "onChange"])) : P("", !0)
        ], 4), [
          [Re, e.showPicker]
        ])
      ]))
    ], 64))
  ], 64);
}
const oe = /* @__PURE__ */ G(Ro, [["render", Po], ["__scopeId", "data-v-730ef6cd"]]), To = {
  install: (e) => {
    e.component(oe.name, oe), e.component("Vue3" + oe.name, oe);
  }
};
export {
  oe as ColorPicker,
  To as default
};
